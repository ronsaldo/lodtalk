"Context"
self class: Context.
self category: 'accessing'.

self method [
stackp
    ^ stackp
].

self method [
method
    ^ method
].

self method [
closureOrNil
    ^ closureOrNil
].

self method [
receiver
    ^ receiver
].

self method [
contextTag
    ^ self
].

self category: 'debugger access'.
self method [
selector
    ^ self method selector ifNil: [ self method defaultSelector ]
].

self category: 'private-exceptions'.

self method [
isHandlerContext
    ^ self isHandlerOrSignalingContext and: [ self selector == #on:do: ]
].

self method [
isHandlerOrSignalingContext
    ^ method ifNotNil: [ method primitive = 199 ] ifNil: [ false ]
].

self method [
isUnwindContext
    ^ method ifNotNil: [ method primitive = 198 ] ifNil: [ false ]
].

self method [
nextHandlerContext
    ^ self sender findNextHandlerContext
].

self method [
findNextHandlerContext
    | context |
    context := self findNextHandlerOrSignalingContext.
    context ifNil: [ ^ nil ].

    context isHandlerContext ifTrue: [ ^ context].

    "TODO: add support for signaling"
].

self method [
findNextHandlerOrSignalingContext
    <primitive: 197>
    | context |
    context := self.

    [ context == nil ] whileFalse: [
        context isHandlerOrSignalingContext ifTrue: [ ^ context ].
        context := context sender.
    ].

    ^ nil
].

self method [
findNextUnwindContextUpTo: aContext
    <primitive: 195>
    | context |
    context := self.

    [ context == nil or: [ context == aContext ] ] whileFalse: [
        context isUnwindContext ifTrue: [ ^ context ]
    ].

    ^ nil
].
