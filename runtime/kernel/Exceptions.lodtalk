"Exception"
self class: Exception class.
self method [
signal
    ^ self new signal
].

self method [
signal: aStringMessage
    ^ self new signal: aStringMessage
].

self class: Exception.

self category: 'accessing'.

self method [
defaultAction
    self subclassResponsibility
].

self method [
messageText
    ^ messageText
].

self method [
messageText: aString
    messageText := aString
].

self method [
messageText
    ^ messageText
].

self method [
receiver
    ^ signalContext receiver
].

self category: 'signaling'.

self method [
signal: aMessage
    self messageText: aMessage;
        signal
].

self method [
signal
    signalContext := thisContext contextTag.
    signaler ifNil: [ signaler := self receiver ].
    ^ signalContext nextHandlerContext handleSignal: self
].

"Error"
self class: Error.

self method [
defaultAction
    UnhandledError signalForException: self
].

"MessageNotUnderstood"
self class: MessageNotUnderstood.

self method [
message
    ^ message
].

self method [
message: aMessage
    message := aMessage
].

self method [
receiver
    ^ receiver
].

self method [
receiver: anObject
    receiver := anObject
].

"UnhandledError"
self class: UnhandledError class.
self method [
signalForException: exception
    ^ self new
        exception: exception;
        signal
].

self class: UnhandledError.

self method [
defaultAction
    OSIO printLine: 'Unhandled error'.
    Smalltalk exitToDebugger.
].

self method [
exception
    ^ exception
].

self method [
exception: anException
    exception := anException
].

"Halt"
self class: Halt class.

self method [
defaultAction
    Smalltalk nativeBreakpoint.
].

self method [
now
    self signal
].

self class: Halt.

"Undefined object"
self class: UndefinedObject.

self method [
handleSignal: exception
    ^ exception resumeUnchecked: exception defaultAction
].
